#!/usr/bin/env python
from __future__ import print_function

from os import mkdir, listdir
from os.path import join, exists
from datetime import datetime

from subprocess import check_call

from yaml import load

import argparse

def backup(name, dry_run=True):
    subvol = SUBVOLUMES[name]
    src = subvol['src']

    src_path = join(SNAPSHOT_PATH, name)
    if not exists(src_path) and not dry_run:
        mkdir(src_path)

    d = datetime.now().strftime('%Y-%m-%d')

    dest_path = join(src_path, d)

    if exists(dest_path):
        print('Snapshot %s already exists' % dest_path)
        return

    args = ['btrfs', 'subvolume', 'snapshot', '-r', src, dest_path]

    if dry_run:
        args = ['echo', 'DEBUG:'] + args

    return check_call(args)


def list_snapshots(name, prefix=True, latest=False):
    src_path = join(SNAPSHOT_PATH, name)
    snapshots = sorted(listdir(src_path))

    if latest:
        snapshots = [snapshots[-1]]

    if prefix:
        print('%s: %s' % (name, ','.join(snapshots)))
    else:
        print(','.join(snapshots))

parser = argparse.ArgumentParser(description='ohsnap btrfs snapshot manager',
                                 epilog='ohsnap is *highly* *experimental* and'
                                        ' should not be considered ready for'
                                        ' any usage.')

parser.add_argument('--config', default='ohsnap_config.yml',
                    help='Config file to use. Default: ohsnap_config.yml')

actions = parser.add_argument_group('Actions')
actions.add_argument('-l', '--list', action='store_true',
                     help='List available snapshots')
actions.add_argument('--create', action='store_true',
                     help='Create (daily) snapshot')

match = parser.add_argument_group('Match')
match.add_argument('-s', '--subvolume', type=str, default=None,
                   help='Work only on a specific subvolume')
match.add_argument('-L', '--latest', action='store_true',
                   help='List/Use only newest snapshots')

modifiers = parser.add_argument_group('Modifiers')
modifiers.add_argument('-n', '--dry-run', action='store_true',
                       default=False,
                       help='')
modifiers.add_argument('--debug-config', action='store_true',
                       help='Output interpreted configuration file')

args = parser.parse_args()

if all((args.list, args.create)):
    print('You cannot perform different kinds of actions the same time.')
    parser.print_help()
    exit(1)

with open(args.config) as t:
    c = load(t.read())

if args.debug_config:
    from pprint import pprint
    pprint(c)

SNAPSHOT_PATH = c['snapshot_path']
SUBVOLUMES = c.get('subvolumes', [])
REMOTES = c.get('remotes', [])

if args.list:
    if args.subvolume:
        list_snapshots(args.subvolume, prefix=False, latest=args.latest)
    else:
        for k in SUBVOLUMES.keys() + REMOTES.keys():
            list_snapshots(k, latest=args.latest)

elif args.create:
    if args.subvolume:
        backup(args.subvolume, dry_run=args.dry_run)
    else:
        for k in SUBVOLUMES:
            backup(k, dry_run=args.dry_run)

else:
    parser.print_help()
    exit(1)
